/*
Write a function to perform a binary search. Your function should find the
position and the actual number of steps required to find the position and return both values in an array.
When the array has an even number of values the midpoint index should be rounded up.
Example:
    binaryArray = [1,5,8,12,20,21,35]
    searchValue = 8
    In this case the index returned would be 2 and it should take 3 steps.
    In the first step, 3 is the midpoint index (value = 12).
    In the second step 1 is the midpoint index (value = 5).
    In the third and final step we are only left with 8 at index 2.
*/

function binarySearch(binaryArray, searchValue) {
  let s = 0;
  let e = binaryArray.length-1;
  let i = Math.floor((e-s)/2);  
  let iS = [i];
  let cond;
  let stepCount = 0;
  let conditions = [
    {
      found: false,
      val: 1,
      newI: (s,i,e) => {
        let news = i + 1;
        i = news + Math.floor((e-news)/2);
        return [news, i, e]
      }
    },
    {
      found: true,
      val: 0,
      newI: (s,i,e) => [s,i,e]
    },
    {
      found: false,
      val: -1,
      newI: (s,i,e) => {
        let newe = i - 1;
        i = s + Math.floor((newe-s)/2);
        return [s, i, newe]
      }
    }
  ];
  do {
    iS.push(i);
    cond = conditions.find(c => c.val === Math.sign(searchValue-binaryArray[i]));
    stepCount++;
//     console.log(cond);
//     console.log(s,i,e);
    [s,i,e] = cond.newI(s,i,e); 
  } while(!cond.found && i >= 0 && i < binaryArray.length && !iS.includes(i) );
  
  return[cond.found && i, stepCount]
}

// // value is the midpoint
console.log(binarySearch([1, 3, 7, 10, 14, 19, 31], 10)); // [3,1]
// the only value
console.log(binarySearch([1], 1)); // [0,1]
// // at the beginning
// binaryArray = [1, 3, 7, 10, 14, 19, 31];
// searchValue = 1
console.log(binarySearch([1, 3, 7, 10, 14, 19, 31], 1)); // [0,3]
// // at the end
// searchValue = 31
console.log(binarySearch([1, 3, 7, 10, 14, 19, 31], 31)); // [6,3]

console.log(binarySearch([1, 3, 7, 10, 14, 19, 31, 100], 20)); // not found
